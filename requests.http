### Variables
@baseUrl = http://localhost:3000
@apiPrefix = api/v1
@contentType = application/json
# Replace with your actual Clerk session token or use the generated dev token
@clerkToken = eyJhbGciOiJkZXYiLCJ0eXAiOiJKV1QifQ.eyJzdWIiOiJ1c2VyXzJ6T2hUUDh0Y0VJMkNTTU45WkpaNURrWkZMTSIsImVtYWlsIjoiY29zbWljZGV2Y3NAZ21haWwuY29tIiwiaWF0IjoxNzUxNjEyNDA1LCJleHAiOjE3NTE2OTg4MDUsImlzcyI6ImNsZXJrLWRldiJ9.ZGV2LXNpZ25hdHVyZS11c2VyXzJ6T2hUUDh0Y0VJMkNTTU45WkpaNURrWkZMTS0xNzUxNjEyNDA1Mjcy

### Admin Test Endpoint (Auth - Public)
GET {{baseUrl}}/{{apiPrefix}}/auth/admin/test

###

### Admin Test Endpoint (Users - Public)
GET {{baseUrl}}/{{apiPrefix}}/users/admin/test

###

### Generate Clerk Development Token by Email (DEVELOPMENT ONLY)
# This endpoint generates an actual development token for testing
# Response: { "token": "jwt-like-token", "clerkId": "user_123", "email": "user@example.com", "note": "..." }
GET {{baseUrl}}/{{apiPrefix}}/users/clerk/token?email=john.doe@example.com

###

### Generate Clerk Development Token by Email (Different User)
# Use this token for testing protected endpoints
GET {{baseUrl}}/{{apiPrefix}}/users/clerk/token?email=contact@helpinghands.org

###

### Get All Users (Protected - requires Clerk session token)
GET {{baseUrl}}/{{apiPrefix}}/users
Authorization: Bearer {{clerkToken}}

###

### Get All Users (Protected - with Clerk Authorization header)
# Replace @clerkToken with the token from the dev token endpoint above
GET {{baseUrl}}/{{apiPrefix}}/users
Authorization: Bearer {{clerkToken}}

###

### Get All Users (Protected - with Generated Dev Token)
# First generate a token using the endpoint above, then copy it here
# GET {{baseUrl}}/{{apiPrefix}}/users/clerk/token?email=john.doe@example.com
# Then copy the token from response and paste it below:
GET {{baseUrl}}/{{apiPrefix}}/users
Authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJkZXYifQ.eyJzdWIiOiJ1c2VyXzJhYmMxMjNkZWY0NTYiLCJlbWFpbCI6ImpvaG4uZG9lQGV4YW1wbGUuY29tIiwiaWF0IjoxNzMzNTg2MTQwLCJleHAiOjE3MzM2NzI1NDAsImlzcyI6ImNsZXJrLWRldiJ9.ZGV2LXNpZ25hdHVyZS11c2VyXzJhYmMxMjNkZWY0NTYtMTczMzU4NjE0MDAwMA

###

### Create User (Public - no auth required)
POST {{baseUrl}}/{{apiPrefix}}/users
Content-Type: {{contentType}}

{
  "clerkId": "user_2abc123def456",
  "email": "john.doe@example.com",
  "firstName": "John",
  "lastName": "Doe",
  "avatarUrl": "https://example.com/avatar.jpg",
  "bio": "Software developer passionate about charity work",
  "accountType": "individual"
}

###

### Create User (Nonprofit)
POST {{baseUrl}}/{{apiPrefix}}/users
Content-Type: {{contentType}}

{
  "clerkId": "user_2xyz789ghi012",
  "email": "contact@helpinghands.org",
  "firstName": "Sarah",
  "lastName": "Johnson",
  "avatarUrl": "https://example.com/nonprofit-avatar.jpg",
  "bio": "Director of Helping Hands Foundation",
  "accountType": "nonprofit"
}

###

### Create User (Team)
POST {{baseUrl}}/{{apiPrefix}}/users
Content-Type: {{contentType}}

{
  "clerkId": "user_2team456def789",
  "email": "team@charitygroup.org",
  "firstName": "Team",
  "lastName": "Leader",
  "accountType": "team"
}

###

### Get User by ID (Protected - requires Clerk session token)
# Replace {user-id} with an actual user ID from your database
GET {{baseUrl}}/{{apiPrefix}}/users/{user-id}

###

### Get User by ID (Protected - with Clerk Authorization header)
# Replace {user-id} with an actual user ID from your database
GET {{baseUrl}}/{{apiPrefix}}/users/{user-id}
Authorization: Bearer {{clerkToken}}

###

### Get User by Clerk ID (Protected - requires Clerk session token)
GET {{baseUrl}}/{{apiPrefix}}/users/clerk/user_2abc123def456

###

### Get User by Clerk ID (Protected - with Authorization)
GET {{baseUrl}}/{{apiPrefix}}/users/clerk/user_2abc123def456
Authorization: Bearer {{clerkToken}}

###

### Update User (Protected - requires Clerk session token)
# Replace {user-id} with an actual user ID from your database
PUT {{baseUrl}}/{{apiPrefix}}/users/{user-id}
Content-Type: {{contentType}}
Authorization: Bearer {{clerkToken}}

{
  "firstName": "John Updated",
  "lastName": "Doe Updated",
  "bio": "Updated bio - Senior software developer passionate about charity work",
  "avatarUrl": "https://example.com/updated-avatar.jpg",
  "setupComplete": true
}

###

### Update User (Partial)
# Replace {user-id} with an actual user ID from your database
PUT {{baseUrl}}/{{apiPrefix}}/users/{user-id}
Content-Type: {{contentType}}
Authorization: Bearer {{clerkToken}}

{
  "setupComplete": true
}

###

### Delete User (Protected - requires Clerk session token)
# Replace {user-id} with an actual user ID from your database
DELETE {{baseUrl}}/{{apiPrefix}}/users/{user-id}
Authorization: Bearer {{clerkToken}}

###

### Test Invalid Email (Should fail validation)
POST {{baseUrl}}/{{apiPrefix}}/users
Content-Type: {{contentType}}

{
  "clerkId": "user_2invalid123",
  "email": "invalid-email",
  "firstName": "Test",
  "lastName": "User",
  "accountType": "individual"
}

###

### Test Invalid Account Type (Should fail validation)
POST {{baseUrl}}/{{apiPrefix}}/users
Content-Type: {{contentType}}

{
  "clerkId": "user_2invalid456",
  "email": "test@example.com",
  "firstName": "Test",
  "lastName": "User",
  "accountType": "invalid_type"
}

###

### Test Without Authorization Header (Should return 401)
GET {{baseUrl}}/{{apiPrefix}}/users

###

### Test With Invalid Token (Should return 401)
GET {{baseUrl}}/{{apiPrefix}}/users
Authorization: Bearer invalid-token-123

###
