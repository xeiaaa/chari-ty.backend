// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum AccountType {
  individual
  team
  nonprofit
}

enum GroupType {
  individual
  team
  nonprofit
}

enum GroupMemberRole {
  owner
  admin
  editor
  viewer
}

enum GroupMemberStatus {
  active
  invited
  removed
}

// Models
model User {
  id            String      @id @default(cuid())
  clerkId       String      @unique
  email         String      @unique
  username      String      @unique
  firstName     String
  lastName      String
  avatarUrl     String?
  bio           String?
  accountType   AccountType
  setupComplete Boolean     @default(false)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  // Relations
  groupMemberships GroupMember[]
  donations        Donation[]
  groups           Group[]
  uploads          Upload[]

  @@map("users")
}

model Group {
  id             String    @id @default(cuid())
  name           String
  slug           String    @unique
  description    String?
  type           GroupType
  avatarUrl      String?
  website        String?
  ein            String? // For nonprofits
  documentsUrls  String[] // For verification documents
  verified       Boolean   @default(false)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  stripeId       String? // Connect payout
  ownerId        String // FK to User who created this group
  avatarUploadId String?

  // Relations
  owner        User          @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  members      GroupMember[]
  fundraisers  Fundraiser[]
  groupUploads GroupUpload[]
  avatar       Upload?       @relation(fields: [avatarUploadId], references: [id], onDelete: SetNull)

  @@map("groups")
}

model GroupMember {
  id           String            @id @default(cuid())
  userId       String?
  groupId      String
  role         GroupMemberRole
  status       GroupMemberStatus @default(invited)
  invitedName  String? // For invited members not yet registered
  invitedEmail String? // For invited members not yet registered
  invitationId String? // Clerk invitation ID for matching on user.created webhook
  joinedAt     DateTime          @default(now())
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt

  // Relations
  user  User? @relation(fields: [userId], references: [id], onDelete: Cascade)
  group Group @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@unique([userId, groupId], name: "unique_user_group", map: "unique_user_group")
  @@unique([invitedEmail, groupId], name: "unique_invitedEmail_group", map: "unique_invitedEmail_group")
  @@map("group_members")
}

enum FundraiserCategory {
  education
  health
  disaster_relief
  environment
  animals
  children
  community
  arts
  sports
  food
  housing
  technology
  other
}

enum FundraiserStatus {
  draft
  pending
  published
  suspended
}

model Fundraiser {
  id                  String             @id @default(cuid())
  slug                String             @unique
  title               String
  summary             String
  description         String
  category            FundraiserCategory
  goalAmount          Decimal
  currency            String
  endDate             DateTime?
  coverUrl            String
  galleryUrls         String[]
  groupId             String // FK to Group
  status              FundraiserStatus   @default(draft)
  isPublic            Boolean            @default(false)
  stopWhenGoalReached Boolean            @default(false)
  acceptingDonations  Boolean            @default(true)
  isGoalReached       Boolean            @default(false)
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt

  // Relations
  group             Group               @relation(fields: [groupId], references: [id], onDelete: Cascade)
  milestones        Milestone[]
  links             FundraiserLink[]
  donations         Donation[]
  fundraiserGallery FundraiserGallery[]

  @@map("fundraisers")
}

model Milestone {
  id                String    @id @default(cuid())
  fundraiserId      String
  stepNumber        Int
  amount            Decimal
  title             String
  purpose           String
  achieved          Boolean   @default(false)
  achievedAt        DateTime?
  completionDetails String? // Details about how the milestone was completed
  proofUrls         String[] // URLs to proof images/videos
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Relations
  fundraiser       Fundraiser        @relation(fields: [fundraiserId], references: [id], onDelete: Cascade)
  milestoneUploads MilestoneUpload[]

  // Ensure stepNumber is unique within a fundraiser
  @@unique([fundraiserId, stepNumber], name: "unique_fundraiser_step")
  @@map("milestones")
}

model FundraiserLink {
  id           String   @id @default(cuid())
  fundraiserId String
  alias        String // Required tracking code (e.g. 'facebook-john', 'email-spring')
  note         String? // Optional context (e.g. 'Shared in Facebook community group', 'Spring newsletter')
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  fundraiser Fundraiser @relation(fields: [fundraiserId], references: [id], onDelete: Cascade)
  donations  Donation[]

  // Ensure alias is unique per fundraiser
  @@unique([fundraiserId, alias], name: "unique_fundraiser_alias")
  @@map("fundraiser_links")
}

enum DonationStatus {
  pending
  completed
  failed
  refunded
}

model Donation {
  id               String         @id @default(cuid())
  fundraiserId     String
  donorId          String? // User ID if not anonymous
  amount           Decimal
  currency         String
  name             String? // Optional donor name
  message          String? // Optional donor message
  isAnonymous      Boolean        @default(false)
  status           DonationStatus @default(pending)
  stripeId         String? // Stripe payment ID
  fundraiserLinkId String? // FK to FundraiserLink if donation came from a link
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt

  // Relations
  fundraiser Fundraiser      @relation(fields: [fundraiserId], references: [id], onDelete: Cascade)
  donor      User?           @relation(fields: [donorId], references: [id])
  sourceLink FundraiserLink? @relation(fields: [fundraiserLinkId], references: [id])

  @@map("donations")
}

model Upload {
  id                String   @id @default(cuid())
  cloudinaryAssetId String   @unique
  publicId          String
  url               String
  eagerUrl          String?
  format            String
  resourceType      String
  size              Int
  pages             Int?
  originalFilename  String
  uploadedAt        DateTime
  uploadedById      String // FK to User who uploaded the file
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  uploadedBy        User                @relation(fields: [uploadedById], references: [id], onDelete: Cascade)
  fundraiserGallery FundraiserGallery[]
  groupUploads      GroupUpload[]
  groups            Group[]
  milestoneUploads  MilestoneUpload[]

  @@map("uploads")
}

model FundraiserGallery {
  id           String   @id @default(cuid())
  fundraiserId String
  uploadId     String
  order        Int      @default(0)
  caption      String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  fundraiser Fundraiser @relation(fields: [fundraiserId], references: [id], onDelete: Cascade)
  upload     Upload     @relation(fields: [uploadId], references: [id], onDelete: Cascade)

  @@map("fundraiser_gallery")
}

model GroupUpload {
  id        String   @id @default(cuid())
  groupId   String
  uploadId  String
  type      String // e.g., "verification", "gallery"
  caption   String?
  order     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  group  Group  @relation(fields: [groupId], references: [id], onDelete: Cascade)
  upload Upload @relation(fields: [uploadId], references: [id], onDelete: Cascade)

  @@map("group_uploads")
}

model MilestoneUpload {
  id          String   @id @default(cuid())
  milestoneId String
  uploadId    String
  caption     String?
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  milestone Milestone @relation(fields: [milestoneId], references: [id], onDelete: Cascade)
  upload    Upload    @relation(fields: [uploadId], references: [id], onDelete: Cascade)

  @@map("milestone_uploads")
}
