// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum AccountType {
  individual
  team
  nonprofit
}

enum GroupType {
  team
  nonprofit
}

enum GroupMemberRole {
  owner
  admin
  editor
  viewer
}

enum GroupMemberStatus {
  active
  invited
  removed
}

// Models
model User {
  id            String      @id @default(cuid())
  clerkId       String      @unique
  email         String      @unique
  firstName     String
  lastName      String
  avatarUrl     String?
  bio           String?
  accountType   AccountType
  setupComplete Boolean     @default(false)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  // Relations
  groupMemberships GroupMember[]
  Fundraiser       Fundraiser[]

  @@map("users")
}

model Group {
  id            String    @id @default(cuid())
  name          String
  description   String?
  type          GroupType
  avatarUrl     String?
  website       String?
  ein           String? // For nonprofits
  documentsUrls String[] // For verification documents
  verified      Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  members    GroupMember[]
  Fundraiser Fundraiser[]

  @@map("groups")
}

model GroupMember {
  id           String            @id @default(cuid())
  userId       String?
  groupId      String
  role         GroupMemberRole
  status       GroupMemberStatus @default(invited)
  invitedName  String? // For invited members not yet registered
  invitedEmail String? // For invited members not yet registered
  invitationId String? // Clerk invitation ID for matching on user.created webhook
  joinedAt     DateTime          @default(now())
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt

  // Relations
  user  User? @relation(fields: [userId], references: [id], onDelete: Cascade)
  group Group @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@unique([userId, groupId], name: "unique_user_group", map: "unique_user_group")
  @@unique([invitedEmail, groupId], name: "unique_invitedEmail_group", map: "unique_invitedEmail_group")
  @@map("group_members")
}

enum FundraiserCategory {
  education
  health
  disaster_relief
  environment
  animals
  children
  community
  arts
  sports
  food
  housing
  technology
  other
}

enum FundraiserOwnerType {
  user
  group
}

enum FundraiserStatus {
  draft
  pending
  published
  suspended
}

model Fundraiser {
  id          String              @id @default(cuid())
  slug        String              @unique
  title       String
  summary     String
  description String
  category    FundraiserCategory
  goalAmount  Decimal
  currency    String
  endDate     DateTime?
  coverUrl    String
  galleryUrls String[]
  ownerType   FundraiserOwnerType
  userId      String? // FK to User (nullable)
  groupId     String? // FK to Group (nullable)
  status      FundraiserStatus    @default(draft)
  isPublic    Boolean             @default(false)
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt

  // Relations
  user  User?  @relation(fields: [userId], references: [id])
  group Group? @relation(fields: [groupId], references: [id])

  @@map("fundraisers")
}
